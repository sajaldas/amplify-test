{"version":3,"sources":["logo.svg","aws-exports.js","SignUp.js","SignIn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","awsmobile","SignUp","props","handleChange","e","console","log","target","id","setState","value","handleFormSubmit","state","username","email","password","signedUp","confirmationCode","Auth","confirmSignUp","forceAliasCreation","then","data","catch","err","signUp","attributes","__type","UserSub","className","type","onChange","this","onClick","Component","SignIn","signIn","message","signedIn","Amplify","configure","awsconfig","App","handleFormToggle","showLoginForm","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73b5e59b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-south-1\",\n    \"aws_cognito_identity_pool_id\": \"ap-south-1:3123af32-621c-448b-9673-dc7ec62ad7d7\",\n    \"aws_cognito_region\": \"ap-south-1\",\n    \"aws_user_pools_id\": \"ap-south-1_liUanytM7\",\n    \"aws_user_pools_web_client_id\": \"14m65ng79m89e58r1ls5iftoar\",\n    \"oauth\": {}\n};\n\n\nexport default awsmobile;\n","import React, { Component } from 'react'\r\nimport { Auth } from 'aws-amplify';\r\n\r\nclass SignUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            email: '',\r\n            password: '',\r\n            //phone: '',\r\n            confirmationCode: '',\r\n            signedUp: false,            \r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        console.log(e.target.id);\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n\r\n    handleFormSubmit = () => {\r\n        const { username, email, password, signedUp, confirmationCode } = this.state\r\n\r\n        if(!signedUp)\r\n        {\r\n            Auth.signUp({\r\n                username,\r\n                password,\r\n                attributes: {\r\n                    email                \r\n                }\r\n            })\r\n            .then((data) => {\r\n                console.log('data = ', data);\r\n                if(data.__type)\r\n                console.log('error');\r\n                else if(data.UserSub)\r\n                {\r\n                    console.log('success');\r\n                    this.setState({signedUp: true})\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n        }\r\n        else\r\n        {\r\n            Auth.confirmSignUp(username, confirmationCode, {                \r\n                forceAliasCreation: true    \r\n            }).then(data => console.log(data))\r\n              .catch(err => console.log(err));\r\n        }        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"signupform\">\r\n                <form>\r\n                    <div className=\"formrow\">\r\n                        <label>Username</label>\r\n                        <input type=\"text\" id=\"username\" onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"formrow\">\r\n                        <label>Email</label>\r\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"formrow\">\r\n                        <label>Password</label>\r\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"formrow\">\r\n                        <label>Phone</label>\r\n                        <input type=\"text\" id=\"phone\" onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"formrow\">\r\n                        <label> </label>\r\n                        <input type=\"button\" id=\"btnsubmit\" value=\"Sign Up\" onClick={() => this.handleFormSubmit()} />                        \r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default SignUp","import React, { Component } from 'react'\r\nimport { Auth } from 'aws-amplify';\r\n\r\nclass SignIn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',            \r\n            signedIn: false,\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        //console.log(e.target.id);\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleFormSubmit = () => {\r\n        const { email, password } = this.state\r\n        // console.log('email = ', email)\r\n        // console.log('password = ', password)\r\n        Auth.signIn({\r\n            username: email,\r\n            password: password\r\n        })\r\n            .then((data) => {\r\n                console.log('after login data = ', data);\r\n                if (data.message)\r\n                    console.log('error');\r\n                else if (data.username) {\r\n                    console.log('success');\r\n                    this.setState({ signedIn: true })\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    render() {\r\n        const { signedIn } = this.state\r\n\r\n        if (signedIn) {\r\n            return (\r\n                <div>You are signed in!</div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"signupform\">                   \r\n                    <form>\r\n                        {/* <div className=\"formrow\">\r\n                        <label>Username</label>\r\n                        <input type=\"text\" id=\"username\" onChange={this.handleChange} />\r\n                    </div> */}\r\n                        <div className=\"formrow\">\r\n                            <label>Email</label>\r\n                            <input type=\"email\" id=\"email\" onChange={this.handleChange} />\r\n                        </div>\r\n                        <div className=\"formrow\">\r\n                            <label>Password</label>\r\n                            <input type=\"password\" id=\"password\" onChange={this.handleChange} />\r\n                        </div>\r\n                        {/* <div className=\"formrow\">\r\n                        <label>Phone</label>\r\n                        <input type=\"text\" id=\"phone\" onChange={this.handleChange} />\r\n                    </div> */}\r\n                        <div className=\"formrow\">\r\n                            <label> </label>\r\n                            <input type=\"button\" id=\"btnsubmit\" value=\"Sign In\" onClick={() => this.handleFormSubmit()} />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default SignIn","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Amplify from 'aws-amplify'\nimport awsconfig from './aws-exports'\nimport { withAuthenticator } from 'aws-amplify-react'\n\nimport SignUp from './SignUp'\nimport SignIn from './SignIn'\n\nAmplify.configure(awsconfig)\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      showLoginForm: false\n    }\n  }\n\n  handleFormToggle = () => {\n    //const {toggleState} = this.state.showLoginForm;\n    //console.log('toggleState = ', this.state.showLoginForm);\n    this.setState({showLoginForm: !this.state.showLoginForm})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          (this.state.showLoginForm) ? <SignIn /> : <SignUp />\n        }                \n        <div className=\"toggleform\">\n          <a href=\"#\" onClick={this.handleFormToggle}>{(this.state.showLoginForm) ? 'No Account, Sign Up' : 'Have an accout, Sign In'}</a>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}